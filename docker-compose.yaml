version: '3.8'

networks:
  development:
    driver: bridge

volumes:
  mysql-db:
  redis:
  minio:
  pg_data: { }
  conduktor_data: { }


services:
  mysql:
    extends:
      file: ./docker-compose.base.yaml
      service: mysql
    restart: always
    command: --default-authentication-plugin=caching_sha2_password
    volumes:
      - mysql-db:/var/lib/mysql
      - ./infra/databases/mysql/init:/docker-entrypoint-initdb.d # create necessary databases
    ports:
      - '${FORWARD_MINIO_PORT:-3306}:3306'
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - development
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    networks:
      - development
    ports:
      - '2181:2181'
    environment:
      ZOO_PORT_NUMBER: 2181
      ZOO_SERVER_ID: 1
      ZOO_HC_TIMEOUT: 5
      ALLOW_ANONYMOUS_LOGIN: 'yes'
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "2181" ]
      interval: 10s
      timeout: 10s
      retries: 5

  kafka:
    image: 'bitnami/kafka:latest'
    networks:
      - development
    ports:
      - '9092:9092'
      - '9094:9094'
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092,EXTERNAL://host.docker.internal:9094
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - BITNAMI_DEBUG=yes
      - KAFKA_CFG_NUM_PARTITIONS=2

    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "9091" ]
      interval: 10s
      timeout: 10s
      retries: 5

  postgresql:
    image: postgres:14
    hostname: postgresql
    networks:
      - development
    environment:
      POSTGRES_DB: "conduktor-console"
      POSTGRES_USER: "conduktor"
      POSTGRES_PASSWORD: "change_me"

  conduktor-console:
    image: conduktor/conduktor-console:1.22.0
    depends_on:
      - kafka
      - postgresql
      - conduktor-monitoring
    ports:
      - "8080:8080"
    networks:
      - development
    environment:
      CDK_DATABASE_URL: "postgresql://conduktor:change_me@postgresql:5432/conduktor-console"
      CDK_ORGANIZATION_NAME: "Myanmar Cyber Youths"
      CDK_ADMIN_EMAIL: "admin@cyberyouths.com.mm"
      CDK_ADMIN_PASSWORD: "password"
      CDK_MONITORING_CORTEX-URL: http://conduktor-monitoring:9009/
      CDK_MONITORING_ALERT-MANAGER-URL: http://conduktor-monitoring:9010/
      CDK_MONITORING_CALLBACK-URL: http://conduktor-console:8080/monitoring/api/
      CDK_MONITORING_NOTIFICATIONS-CALLBACK-URL: http://localhost:8080


  conduktor-monitoring:
    image: conduktor/conduktor-console-cortex:1.22.0
    networks:
      - development
    environment:
      CDK_CONSOLE-URL: "http://conduktor-console:8080"

  mailpit:
    extends:
      file: ./docker-compose.base.yaml
      service: mailpit
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Mail Box
    networks:
      - development

  redis:
    extends:
      file: ./docker-compose.base.yaml
      service: redis
    volumes:
      - redis:/data
    ports:
      - "6379:6379"
    networks:
      - development
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 5s
      timeout: 5s

  minio:
    extends:
      file: ./docker-compose.base.yaml
      service: minio
    ports:
      - '${FORWARD_MINIO_PORT:-9000}:9000'
      - '${FORWARD_MINIO_CONSOLE_PORT:-8900}:8900'
    environment:
      MINIO_ROOT_USER: root
      MINIO_ROOT_PASSWORD: password
    volumes:
      - 'minio:/data/minio'
    networks:
      - development
    command: 'minio server /data/minio --console-address ":8900"'
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      retries: 3
      timeout: 5s

  create-bucket:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: [ "/bin/sh", "-c" ]
    command: |
      "
      # set host alias
      mc alias set minio http://minio:9000 root password

      # create IAM user
      # ref: https://min.io/docs/minio/linux/administration/identity-access-management/minio-user-management.html#id5
      mc admin user add minio access_key secret_key
      mc admin policy attach minio readwrite --user=access_key

      # create bucket
      mc mb minio/breeze
      mc anonymous set upload minio/breeze
      mc anonymous set download minio/breeze
      mc anonymous set public minio/breeze
      exit 0;
      "
    networks:
      - development


  bun:
    build:
      dockerfile: infra/bun/Dockerfile
      context: .
    image: breezemm.com/bun:latest
    working_dir: /temp/dev


  kong:
    image: kong
    networks:
      - development
    volumes:
      - "./infra/kong/config:/usr/local/kong/declarative"
      - "./infra/kong/logs/file.log:/file.log"
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/usr/local/kong/declarative/kong.yml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
      - KONG_LOG_LEVEL=debug
      - KONG_PLUGINS=bundled
    ports:
      - "8000:8000/tcp"
      - "127.0.0.1:7990:8001/tcp"
      - "8001:8001/tcp"
      - "8443:8443/tcp"
      - "127.0.0.1:8444:8444/tcp"


  auth:
    restart: unless-stopped
    build:
      args:
        APP_PATH: ./apps/auth
      context: .
      dockerfile: Dockerfile
    networks:
      - development
    volumes:
      - ./apps/auth:/var/www/html/apps/auth
    ports:
      - "8003:8000"
    depends_on:
      - mysql

  gateway:
    restart: unless-stopped
    build:
      args:
        APP_PATH: ./apps/gateway
      context: .
      dockerfile: Dockerfile
    networks:
      - development
    volumes:
      - ./apps/gateway:/var/www/html/apps/gateway
    ports:
      - "8003:8000"
    depends_on:
      - mysql

  wallets:
    restart: unless-stopped
    build:
      args:
        APP_PATH: ./apps/wallets
      context: .
      dockerfile: Dockerfile
    networks:
      - development
    volumes:
      - ./apps/wallets:/var/www/html/apps/wallets
    ports:
      - "8003:8000"
    depends_on:
      - mysql

  notifications:
    restart: unless-stopped
    build:
      args:
        APP_PATH: ./apps/notifications
      context: .
      dockerfile: Dockerfile
    networks:
      - development
    volumes:
      - ./apps/notifications:/var/www/html/apps/notifications
    ports:
      - "8003:8000"
    depends_on:
      - mysql
