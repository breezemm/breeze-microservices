volumes:
  mysql-db:
    driver: local
  redis:
    driver: local
  minio:
    driver: local

networks:
  dev:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:${ZOOKEEPER_VERSION}
    env_file: .env
    container_name: zookeeper
    ports:
      - 2181:2181
    networks:
      - dev

  kafka:
    restart: on-failure
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    env_file: .env
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    networks:
      - dev
    healthcheck:
      test: [ "CMD", "kafka-topics", "--list", "--zookeeper", "zookeeper:2181" ]
      interval: 5s
      timeout: 10s
      retries: 5

  init-kafka:
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    depends_on:
      - kafka
    entrypoint: [ "/bin/sh", "-c" ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list
      #
      echo -e 'üôå Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic wallets --replication-factor 1 --partitions 3
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic notifications --replication-factor 1 --partitions 3
      #
      echo -e 'üêô Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "
    networks:
      - dev

  schema-registry:
    image: confluentinc/cp-schema-registry:6.2.0
    env_file: .env
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - kafka
    ports:
      - 8089:8089
    networks:
      - dev

  kafka-manager:
    image: hlebalbau/kafka-manager:latest
    env_file: .env
    container_name: kafka-manager
    depends_on:
      - kafka
    ports:
      - 10000:9000
    networks:
      - dev

  mailpit:
    image: axllent/mailpit:latest
    container_name: mailpit
    ports:
      - 1025:1025
      - 8025:8025
    networks:
      - dev

  redis:
    image: redis:${REDIS_VERSION}-alpine${ALPINE_VERSION}
    env_file: .env
    volumes:
      - redis:/data
    ports:
      - "6379:6379"
    networks:
      - dev
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 5s
      timeout: 5s

  gateway:
    restart: unless-stopped
    build:
      args:
        uid: 1000
        user: breeze
      context: .
      dockerfile: ./apps/gateway/dev.Dockerfile
    ports:
      - "8001:80"
    volumes:
      - ./apps/gateway:/usr/src/app
      - ./apps/gateway/vendor:/usr/src/app/vendor
      - ./apps/gateway/node_modules:/usr/src/app/node_modules
      - ./apps/gateway/docker/dev/supervisord.conf:/etc/supervisor/conf.d/supervisord.conf
    depends_on:
      - kafka
      - mysql-db
      - redis
    networks:
      - dev

  wallets:
    restart: unless-stopped
    build:
      args:
        uid: 1000
        user: breeze
      context: .
      dockerfile: ./apps/wallets/dev.Dockerfile
    ports:
      - "8002:80"
    volumes:
      - ./apps/wallets:/usr/src/app
      - ./apps/wallets/vendor:/usr/src/app/vendor
      - ./apps/wallets/node_modules:/usr/src/app/node_modules
      - ./apps/wallets/docker/dev/supervisord.conf:/etc/supervisor/conf.d/supervisord.conf
    depends_on:
      - mysql-db
      - redis
      - kafka
    networks:
      - dev
    links:
      - gateway

  suggestion:
    restart: always
    build:
      context: .
      dockerfile: ./apps/suggestion/dev.dockerfile
      target: development
    command: pnpm run dev --filter suggestion
    ports:
      - "8003:80"
    volumes:
      - .:/usr/src/app
      - /var/www/suggestion/node_modules
    depends_on:
      - kafka
    networks:
      - dev

  notifications:
    restart: always
    build:
      args:
        uid: 1000
        user: breeze
      context: .
      dockerfile: apps/notifications/dev.Dockerfile
    ports:
      - "8004:80"
    volumes:
      - ./apps/notifications:/usr/src/app
      - ./apps/notifications/vendor:/usr/src/app/vendor
      - ./apps/notifications/node_modules:/usr/src/app/node_modules
      - ./apps/notifications/docker/dev/supervisord.conf:/etc/supervisor/conf.d/supervisord.conf
    depends_on:
      - kafka
      - redis
      - mysql-db
    networks:
      - dev

  mysql-db:
    image: mysql/mysql-server:${MYSQL_VERSION}
    restart: always
    command: --default-authentication-plugin=caching_sha2_password
    volumes:
      - './infra/docker/mysql/create-database.sh:/docker-entrypoint-initdb.d/10-create-database.sh'
      - mysql-db:/var/lib/mysql
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_USER=user
      - MYSQL_PASSWORD=password
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - dev

  minio:
    image: 'minio/minio:latest'
    ports:
      - '${FORWARD_MINIO_PORT:-9000}:9000'
      - '${FORWARD_MINIO_CONSOLE_PORT:-8900}:8900'
    environment:
      MINIO_ROOT_USER: root
      MINIO_ROOT_PASSWORD: password
    volumes:
      - 'minio:/data/minio'
    networks:
      - dev
    command: 'minio server /data/minio --console-address ":8900"'
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      retries: 3
      timeout: 5s

  create-bucket:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: [ "/bin/sh", "-c" ]
    command: |
      "
      # set host alias
      mc alias set minio http://minio:9000 root password

      # create IAM user
      # ref: https://min.io/docs/minio/linux/administration/identity-access-management/minio-user-management.html#id5
      mc admin user add minio access_key secret_key
      mc admin policy attach minio readwrite --user=access_key

      # create bucket
      mc mb minio/breeze
      mc anonymous set upload minio/breeze
      mc anonymous set download minio/breeze
      mc anonymous set public minio/breeze
      exit 0;
      "
    networks:
      - dev
